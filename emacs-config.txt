                ________________________________________

                 RONALDO'S EMACS LITERATE CONFIGURATION

                             Ronaldo Gligan
                ________________________________________


                               2024-06-12


Table of Contents
_________________

1. Constants
2. `use-package' and MELPA
3. Editor preferences (better default behaviour)
.. 1. Mac OS behaviour
4. Creating a minimal, zen/distraction-free frame
.. 1. Ergonomics
5. Theming and Emacs aesthetics
.. 1. Blend title bar & frame opacity on MacOS
.. 2. Dark mode based on OS settings and custom toggle
..... 1. Switching MacOS's theme
.. 3. Custom fonts
..... 1. Custom mode line font
..... 2. Font ligatures
6. LSP and completion
.. 1. The `eglot' LSP client
.. 2. Completion with `corfu'
7. Major modes for languages
.. 1. C
.. 2. OCaml
.. 3. SML
.. 4. Zig
.. 5. Shell mode
.. 6. Fish
.. 7. CSS
8. Org mode
.. 1. Centering and auto-filling content
.. 2. Nice Org aesthetics
.. 3. Org Roam
9. Activating disabled modes
10. Nicities
.. 1. Automatically close and colorise bracket pairs
.. 2. Better `M-x' completion
.. 3. Icons with `dired' and `corfu' integration (`nerd-icons')
.. 4. Show possible key bindings (`which-key')
.. 5. Fold code (`yafolding')
.. 6. Flash current line in buffer on buffer change
.. 7. Duplicate lines keeping the column position intact (with `C-c d')
.. 8. Colorise ANSI escape codes in compilation buffer
.. 9. Enlarge region with `moc' (Master of ceremonies)
11. Gligan's custom functionality
.. 1. Running a program interactively `gligan/run-program'


<https://gligan.net/ellas.png>


1 Constants
===========

  ,----
  | (defconst gligan/light-theme 'ellas)
  | (defconst gligan/dark-theme 'somnus)
  | 
  | (defconst gligan/fixed-pitch-font "Iosevka Comfy Motion")
  | (defconst gligan/variable-pitch-font
  |   (if (eq system-type 'darwin)
  |       "Inter"
  |     "Iosevka Comfy Motion Duo"))
  | (defconst gligan/semi-fixed-pitch-font "Iosevka Comfy Motion Duo")
  | 
  | (defconst gligan/fixed-pitch-font-size 130)
  | (defconst gligan/variable-pitch-font-size 160)
  | 
  | (defconst gligan/scratch-buffer-mode 'c-mode)
  | 
  | (defconst gligan/org-documents-folder "~/Documents/Org/")
  | (defconst gligan/org-roam-folder
  |   (concat gligan/org-documents-folder "Notes/"))
  | 
  | (defconst gligan/c-compiler
  |   (if (eq system-type 'darwin) "clang" "gcc"))
  `----


2 `use-package' and MELPA
=========================

  ,----
  | (require 'package)
  | (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  | (package-initialize)
  `----


3 Editor preferences (better default behaviour)
===============================================

  1) Use 2 spaces as indentation
     ,----
     | (setq-default tab-width 2)
     | (setq-default indent-tabs-mode nil)
     `----

  2) Delete the active region when inserting text
     ,----
     | (delete-selection-mode 1)
     `----

  3) Make word-editing commands work with word components (subwords)
     ,----
     | (global-subword-mode)
     `----

  4) Display the column number and buffer size in the modeline
     ,----
     | (column-number-mode 1)
     | (size-indication-mode 1)
     `----

  5) Enable word wrapping
     ,----
     | (setq-default word-wrap t)
     `----

  6) Different default mode for the scratch buffer
     ,----
     | (setq initial-major-mode gligan/scratch-buffer-mode)
     `----

  7) Create a new buffer for Emacs Lisp code (my replacement for the
     `*scratch*' buffer)

     ,----
     | (let ((elisp-buffer (generate-new-buffer "*elisp*")))
     |   (with-current-buffer elisp-buffer
     |     (emacs-lisp-mode)
     |     (rainbow-delimiters-mode)))
     `----

  8) Don't close Emacs by accident
     ,----
     | (setq confirm-kill-emacs 'y-or-n-p)
     `----

  9) Dates should be formatted as `DD/MM/YYYY' and weeks start on
     Monday.
     ,----
     | (setq calendar-date-style 'european)
     | (setq calendar-week-start-day 1)
     `----

  10) Pixel scrolling instead of line scrolling
      ,----
      | (pixel-scroll-precision-mode 1)
      `----

  11) Display trailing whitespace (only in programming modes)
      ,----
      | (add-hook 'prog-mode-hook
      |           (lambda ()
      |             (setq show-trailing-whitespace t)))
      `----


3.1 Mac OS behaviour
~~~~~~~~~~~~~~~~~~~~

  Use modifier keys as if the Mac keyboard were a standard one.

  ,----
  | (when (eq system-type 'darwin)
  |   (setq mac-command-modifier       'meta
  |         mac-option-modifier        'alt
  |         mac-right-option-modifier  nil
  |         ns-function-modifier       'hyper
  |         mac-pass-control-to-system nil))
  `----


4 Creating a minimal, zen/distraction-free frame
================================================

  1. Start all frames maximised
     ,----
     | (add-to-list 'default-frame-alist '(fullscreen . maximized))
     `----

  2. Minimal window without buttons or scrollbars
     ,----
     | (when (not (eq system-type 'darwin))
     |   (menu-bar-mode -1))
     | (tool-bar-mode -1)
     | (scroll-bar-mode -1)
     `----

  3. Prefer short answers ("y or n") instead of "yes or no"
     ,----
     | (setq use-short-answers t)
     `----

  4. Backup files
     ,----
     | (setq backup-directory-alist
     |       `("." . ,(expand-file-name "backup" user-emacs-directory)))
     | (setq auto-save-default t
     |       create-lockfiles nil
     |       make-backup-files nil)
     | (setq kill-buffer-delete-autosave-files t)
     `----

  5. Visual hacks
     ,----
     | (setq frame-resize-pixelwise t)
     `----

     ,----
     | (setq resize-mini-windows 'grow-only)
     `----

  6. Use a thin cursor instead of a block
     ,----
     | (setq-default cursor-type 'bar)
     `----

  7. When using a thin cursor, highlighting the current line is a good
     idea so that your eyes don't get lost in the vast sea of code in
     all the buffers you have opened.
     ,----
     | (setq global-hl-line-sticky-flag t)
     | (global-hl-line-mode 1)
     `----

  8. No start-up visual noise: disable welcome buffer, and scratch
     buffer does not contain a "helpful" elisp comment.
     ,----
     | ;; No welcome message; no scratch buffer message
     | (setq inhibit-startup-message t
     |       inhibit-startup-screen t
     |       initial-scratch-message nil)
     `----

  9. Use the proportional font to display text buffers
     ,----
     | (add-hook 'text-mode-hook #'variable-pitch-mode)
     `----
     The problem is that `variable-pitch-mode' makes /all/ text
     proportional, and oftentimes I have block codes. `mixed-pitch'
     solves that:
     ,----
     | (use-package mixed-pitch
     |   :ensure t
     |   :defer 3
     |   :defer t
     |   :hook (text-mode . mixed-pitch-mode))
     `----


  1. Decluttering dired mode and showing human-readable file sizes
     ,----
     | (use-package dired
     |   :config
     |   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
     |   (setq dired-hide-details-hide-symlink-targets nil)
     |   (setq dired-listing-switches "-lah"))
     `----


4.1 Ergonomics
~~~~~~~~~~~~~~

  1) Bind `compile' and `recompile' commands to unused key bindings
     ,----
     | (global-set-key (kbd "C-c c") 'compile)
     | (global-set-key (kbd "C-c x") 'recompile)
     | 
     | (global-set-key (kbd "C-c C")
     |                 (lambda ()
     |                   (interactive)
     |                   (compile (read-string "Interactive compile command: ") t)))
     `----


5 Theming and Emacs aesthetics
==============================

  First, declare all external themes as safe (that way, Emacs won't ask
  you every time you load a theme wether to consider it safe or not):

  ,----
  | (setq custom-safe-themes t)
  `----

  Whenever I change the theme I may want to run some code along with
  it. That is why I create a hook:

  ,----
  | (defvar gligan/after-theme-toggle-hook nil)
  `----


5.1 Blend title bar & frame opacity on MacOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (when (eq system-type 'darwin)
  |   (add-to-list 'default-frame-alist '(ns-transparent-titlebar  . t)))
  `----


5.2 Dark mode based on OS settings and custom toggle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The function `gligan/toggle-theme' takes care of switching the system
  theme.

  ,----
  | (defun gligan/toggle-theme ()
  |   "Toggle between the system's light and dark modes"
  |   (interactive)
  |   ;; Toggling the theme
  |   (cond
  |    ((custom-theme-enabled-p gligan/light-theme)
  |     (progn (disable-theme gligan/light-theme)
  |            (load-theme gligan/dark-theme)))
  |    ((custom-theme-enabled-p gligan/dark-theme)
  |     (progn (disable-theme gligan/dark-theme)
  |            (load-theme gligan/light-theme)))
  |    (t (load-theme gligan/light-theme)))
  |   ;; Hooks
  |   (run-hooks 'gligan/after-theme-toggle-hook))
  `----

  ,----
  | (global-set-key (kbd "M-g t t") 'gligan/toggle-theme)
  `----

  Whereas the `auto-dark' package worries about keeping the Emacs theme
  in sync with the OS.

  ,----
  | (use-package auto-dark
  |   :ensure t
  |   :config
  |   (setq auto-dark-light-theme gligan/light-theme)
  |   (setq auto-dark-dark-theme gligan/dark-theme)
  | 
  |   (auto-dark-mode t)
  | 
  |   (add-hook 'auto-dark-dark-mode-hook  'gligan/set-modeline-font)
  |   (add-hook 'auto-dark-light-mode-hook 'gligan/set-modeline-font)
  |   )
  `----


5.2.1 Switching MacOS's theme
-----------------------------

  ,----
  | (add-hook 'gligan/after-theme-toggle-hook
  |           '(lambda ()
  |              (when (eq system-type 'darwin)
  |                (do-applescript
  |                 "tell application \"System Events\"
  |                    tell appearance preferences
  |                      set dark mode to not dark mode
  |                    end tell
  |                  end tell"))))
  `----


5.3 Custom fonts
~~~~~~~~~~~~~~~~

  ,----
  | (set-face-attribute 'default nil
  |                     :family gligan/fixed-pitch-font
  |                     :height gligan/fixed-pitch-font-size)
  | (set-face-attribute 'fixed-pitch nil
  |                     :family gligan/fixed-pitch-font
  |                     :height gligan/fixed-pitch-font-size)
  | (set-face-attribute 'variable-pitch nil
  |                     :family gligan/variable-pitch-font
  |                     :height gligan/variable-pitch-font-size)
  `----


5.3.1 Custom mode line font
---------------------------

  ,----
  | (defun gligan/set-modeline-font ()
  |   (set-face-attribute 'mode-line-active (selected-frame)
  |                       :font gligan/semi-fixed-pitch-font)
  |   (set-face-attribute 'mode-line-inactive (selected-frame)
  |                       :font gligan/semi-fixed-pitch-font))
  | 
  | (add-hook 'gligan/after-theme-toggle-hook
  |           'gligan/set-modeline-font)
  `----


5.3.2 Font ligatures
--------------------

  With the [font I'm using], ot all but most of the ligatures below
  work. As far as I know, all Iosevka and Cascadia Code ligatures are
  included in this list.

  ,----
  | (use-package ligature
  |   :ensure t
  |   :hook (after-init . global-ligature-mode)
  |   :config
  |   (ligature-set-ligatures
  |    't
  |    '("!!" "!!." "!=" "!==" "#!" "##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{" "$>" "%%" "&&" "(*" "*)" "**" "***" "*/" "*>" "++" "+++" "+:" "+>" "--" "---" "--->" "-->" "-:" "-<" "-<<" "->" "->>" "-|" "-~" ".-" ".." "..." "..<" ".=" ".?" "/*" "//" "///" "/=" "/==" "/>" ":+" ":-" "://" "::" ":::" "::=" ":<" ":=" ":>" ";;" "<!--" "<!---" "<$" "<$>" "<*" "<******>" "<*>" "<+" "<+>" "<-" "<--" "<---" "<---->" "<--->" "<-->" "<-<" "<->" "</" "</>" "<:" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<===" "<====>" "<===>" "<==>" "<=>" "<>" "<|" "<|>" "<||" "<|||" "<~" "<~>" "<~~" "=!=" "=/=" "=:" "=:=" "=<<" "==" "===" "===>" "==>" "=>" "=>>" ">-" ">->" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "?." "?:" "?=" "??" "[|" "\\\\" "]#" "^=" "__" "_|_" "www" "{|" "|-" "|=" "|>" "|]" "||" "||=" "||>" "|||>" "|}" "~-" "~=" "~>" "~@" "~~" "~~>")))
  `----


[font I'm using] See section 1


6 LSP and completion
====================

6.1 The `eglot' LSP client
~~~~~~~~~~~~~~~~~~~~~~~~~~

  Eglot is a minimalistic LSP client for Emacs. For Emacs `>= 29', it
  comes installed by default. The main alternative to Eglot is
  [lsp-mode], which is more /complete/: it has more features and more
  customisations, but it is slower and it does not come with Emacs.

  ,----
  | (use-package eglot
  |   :ensure t
  |   :defer t
  |   :hook ((c++-mode
  |           c-mode
  |           haskell-mode
  |           nim-mode
  |           python-mode
  |           rust-mode
  |           tuareg-mode
  |           zig-mode)
  |          . eglot-ensure)
  |   :custom
  |   (eglot-autoshutdown t))
  `----

  [Here] is a list of all the servers that Eglot can communicate to. On
  Fedora I had to install the following:

  - LSP features on C are achieved with `clangd'.
    ,----
    | (sudo) dnf install clang-tools-extra
    `----
  - Haskell has `haskell-language-server', that can be installed with
    `ghcup'.
  - For Nim I use `nimlsp':
    ,----
    | nimble install nimlsp
    `----
  - Python has many LSP servers, I use `pylsp'.
    ,----
    | pip install python-lsp-server
    `----
  - Rust has `rust-analyzer'.
  - OCaml needs `ocaml-lsp-server' and optionally `ocamlformat'.
    ,----
    | opam install ocaml-lsp-server ocamlformat
    `----
  - I can't build Zig's LSP server because it needs a custom version of
    the compiler.


[lsp-mode] <https://emacs-lsp.github.io/lsp-mode/>

[Here] <https://github.com/joaotavora/eglot#connecting-to-a-server>


6.2 Completion with `corfu'
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package corfu
  |   :ensure t
  |   :custom
  |   (corfu-cycle t)
  |   (corfu-auto nil)
  |   :init
  |   (global-corfu-mode))
  `----


7 Major modes for languages
===========================

7.1 C
~~~~~

  Guess the C style that is being used on every opened buffer:


7.2 OCaml
~~~~~~~~~

  ,----
  | (use-package tuareg
  |   :ensure t
  |   :defer t)
  | 
  | (use-package dune
  |   :ensure t
  |   :defer t)
  | 
  | (use-package merlin
  |   :ensure t
  |   :defer t
  |   :config
  |   (add-hook 'tuareg-mode-hook #'merlin-mode)
  |   (setq merlin-error-after-save nil))
  | 
  | (use-package merlin-eldoc
  |   :ensure t
  |   :defer t
  |   :hook (tuareg . merlin-eldoc-setup))
  | 
  `----


7.3 SML
~~~~~~~

  ,----
  | (use-package sml-mode
  |   :config
  |   (setq sml-indent-level 2
  |         sml-indent-args  2))
  `----


7.4 Zig
~~~~~~~

  ,----
  | (use-package zig-mode
  |   :defer t
  |   :config
  |   (setq zig-format-on-save nil)
  |   (zig-format-on-save-mode -1))
  `----


7.5 Shell mode
~~~~~~~~~~~~~~

  ,----
  | (setq sh-basic-offset 2)
  `----


7.6 Fish
~~~~~~~~

  ,----
  | (setq fish-indent-offset 2)
  `----


7.7 CSS
~~~~~~~

  ,----
  | (setq css-indent-offset 2)
  `----


8 Org mode
==========

  These numbers below define the proportions of the org mode headers in
  contrast to the paragraph text.

  ,----
  | (defun gligan/org-mode-font-setup ()
  |   (dolist (face '((org-document-title . 1.8)
  |                   (org-level-1        . 1.3)
  |                   (org-level-2        . 1.2)
  |                   (org-level-3        . 1.1)))
  |     (set-face-attribute (car face) nil
  |                         :font gligan/variable-pitch-font
  |                         :weight 'regular
  |                         :height (cdr face))))
  `----

  ,----
  | (use-package org
  |   :hook ((org-mode . gligan/org-mode-font-setup)
  |          (org-mode . olivetti-mode)
  |          (org-mode . auto-fill-mode))
  |   :config
  |   (setq org-directory 'gligan/org-documents-folder)
  | 
  |   (setq org-hide-emphasis-markers t
  |         org-pretty-entities t
  |         org-startup-folded 'fold
  |         org-startup-indented t
  |         org-highlight-latex-and-related '(latex))
  | 
  |   (setq org-src-tab-acts-natively t
  |         org-edit-src-content-indentation 0)
  | 
  |   (setq org-confirm-babel-evaluate nil))
  `----


8.1 Centering and auto-filling content
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package olivetti
  |   :ensure t)
  `----


8.2 Nice Org aesthetics
~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package org-modern
  |   :ensure t
  |   :defer t
  |   :hook (org-mode . org-modern-mode))
  `----


8.3 Org Roam
~~~~~~~~~~~~

  ,----
  | (use-package org-roam
  |   :custom
  |   (org-roam-directory (file-truename gligan/org-roam-folder))
  |   :config
  |   (org-roam-db-autosync-mode)
  |   :bind (("C-c n f" . org-roam-node-find)
  |          ("C-c n r" . org-roam-node-random)
  |          (:map org-mode-map
  |                (("C-c n i" . org-roam-node-insert)
  |                 ("C-c n o" . org-id-get-create)
  |                 ("C-c n t" . org-roam-tag-add)
  |                 ("C-c n a" . org-roam-alias-add)
  |                 ("C-c n l" . org-roam-buffer-toggle)
  |                 ("C-c n d" . org-roam-dailies-capture-today)))))
  `----

  Optionally install the package `org-roam-ui' to visualise your nodes
  and links between them in a local browser page.


9 Activating disabled modes
===========================

  ,----
  | (put 'narrow-to-region 'disabled nil)
  `----


10 Nicities
===========

10.1 Automatically close and colorise bracket pairs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (electric-pair-mode 1)
  `----

  ,----
  | (use-package rainbow-delimiters
  |   :defer 3
  |   :ensure t
  |   :defer t
  |   :hook (prog-mode . rainbow-delimiters-mode))
  `----


10.2 Better `M-x' completion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package vertico
  |   :ensure t
  |   :config
  |   (setq vertico-cycle t)
  |   (vertico-mode))
  | 
  | (use-package savehist
  |   :ensure t
  |   :config
  |   (savehist-mode))
  | 
  | (use-package orderless
  |   :ensure t
  |   :config
  |   (setq completion-styles '(orderless flex)
  |         completion-category-overrides '((eglot (styles . (orderless flex))))))
  | 
  | (use-package marginalia
  |   :ensure t
  |   :config
  |   (marginalia-mode))
  `----


10.3 Icons with `dired' and `corfu' integration (`nerd-icons')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package nerd-icons
  |   :defer 2
  |   :ensure t)
  | 
  | (use-package nerd-icons-dired
  |   :defer 2
  |   :ensure t
  |   :hook (dired-mode . nerd-icons-dired-mode))
  | 
  | (use-package nerd-icons-corfu
  |   :defer 2
  |   :ensure t
  |   :after corfu
  |   :config
  |   (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
  `----


10.4 Show possible key bindings (`which-key')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  `which-key' implements a menu that appears after a certain amount of
  time when a half-pressed keybinding is entered, showing all the
  possible /routes/ or functions you can perform from there.

  ,----
  | (use-package which-key
  |   :ensure t
  |   :defer 2
  |   :config
  |   (which-key-mode))
  `----


10.5 Fold code (`yafolding')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Being able to fold regions of code is a feature that is quintessential
  for any modern source code editor. `yafolding' figures out the fold
  regions through indentation, so it is language agnostic. I do not
  customise the key bindings or any other setting -- they are perfect
  right out of the box for me. Below I leave the default key bindings:

   `C-RET'    Folds the current scope 
   `C-S-RET'  Folds the parent        
   `C-M-RET'  Folds the entire buffer 

  ,----
  | (use-package yafolding
  |   :ensure t
  |   :defer 8
  |   :hook (prog-mode . yafolding-mode))
  `----


10.6 Flash current line in buffer on buffer change
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (use-package pulsar
  |   :ensure t
  |   :hook (after-init-mode . pulsar-global-mode))
  `----


10.7 Duplicate lines keeping the column position intact (with `C-c d')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (defun gligan/dup-line ()
  |   (interactive)
  |   (duplicate-line)
  |   (next-line)
  |   (backward-word))
  `----

  ,----
  | (global-set-key (kbd "C-c d") 'gligan/dup-line)
  `----


10.8 Colorise ANSI escape codes in compilation buffer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (defun gligan/colorise-compilation ()
  |   (let ((inhibit-read-only t))
  |     (ansi-color-apply-on-region compilation-filter-start (point))))
  | 
  | (use-package ansi-color
  |   :config
  |   (defun gligan/colorise-compilation ()
  |     (let ((inhibit-read-only t))
  |       (ansi-color-apply-on-region
  |        compilation-filter-start (point))))
  | 
  |   (add-hook 'compilation-filter-hook
  |             #'gligan/colorise-compilation))
  `----


10.9 Enlarge region with `moc' (Master of ceremonies)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  I don't like it when doing `moc-focus' I see the currently highlighted
  `hl-line' and the parentheses matched. I disable them.

  ,----
  | (use-package moc
  |   :bind ("C-c m" . moc-focus)
  |   :config
  | 
  |   (push '(remove-hl-line
  |           . ((hl-line . (:background
  |                          (face-attribute 'default :background)))
  |              (show-paren-match . (:inverse-video nil))))
  |         moc-face-remap-presets)
  |   (add-hook 'moc-focus-mode-hook
  |             (lambda ()
  |               (moc-face-remap 'remove-hl-line))))
  `----


11 Gligan's custom functionality
================================

11.1 Running a program interactively `gligan/run-program'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | (defun gligan/run-program ()
  |   "Compiles and runs the program generated by the source code of the
  | current buffer"
  |   (interactive)
  |   (let* ((ext (file-name-extension (buffer-name)))
  |          (comp
  |           (cond
  |            ((string= ext "c")
  |             (cons (format "%s %s" gligan/c-compiler (buffer-name))
  |                   "./a.out"))
  |            (t nil)))
  |          (comp-cmd (car comp))
  |          (outfile (cdr comp)))
  |     (if comp
  |         (if (shell-command comp-cmd)
  |             (progn
  |               (split-window-sensibly)
  |               (other-window 1)
  |               (ansi-term outfile))
  |           (message "Compilation failed."))
  |       (message "Unsupported file extension: %s" ext))))
  | 
  | (global-set-key (kbd "C-c C-x") 'gligan/run-program)
  `----
